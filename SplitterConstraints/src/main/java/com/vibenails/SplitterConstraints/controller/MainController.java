package com.vibenails.SplitterConstraints.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.vibenails.SplitterConstraints.entities.Clients;
import com.vibenails.SplitterConstraints.repositories.ClientRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/splitterconstraints") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private ClientRepository userRepository;

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email
			, @RequestParam String minimumDayRate
			, @RequestParam String timeLine
			, @RequestParam String maxLeadsPerDay
			, @RequestParam String maxBudget
			, @RequestParam String unitPrice) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Clients n = new Clients();
		n.setName(name);
		n.setEmail(email);
		n.setMinimumDayRate(minimumDayRate);
		n.setTimeLine(timeLine);
		n.setMaxLeadsPerDay(maxLeadsPerDay);
		n.setMaxBudget(maxBudget);
		n.setUnitPrice(unitPrice);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Clients> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@GetMapping(path="/update") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam Integer id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Clients n = userRepository.findById(id).get();
		
		n.setCurrentSent(n.getCurrentSent()+1);
		n.setTotalSent(n.getTotalSent()+1);
		
		userRepository.save(n);
		return "Updated";
	}
}
